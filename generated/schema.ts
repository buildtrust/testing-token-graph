// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Proposal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Proposal entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Proposal entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Proposal", id.toString(), this);
  }

  static load(id: string): Proposal | null {
    return store.get("Proposal", id) as Proposal | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get placeBlockNumber(): string {
    let value = this.get("placeBlockNumber");
    return value.toString();
  }

  set placeBlockNumber(value: string) {
    this.set("placeBlockNumber", Value.fromString(value));
  }

  get status(): i32 {
    let value = this.get("status");
    return value.toI32();
  }

  set status(value: i32) {
    this.set("status", Value.fromI32(value));
  }

  get proposer(): Bytes {
    let value = this.get("proposer");
    return value.toBytes();
  }

  set proposer(value: Bytes) {
    this.set("proposer", Value.fromBytes(value));
  }

  get timeCommitted(): BigInt {
    let value = this.get("timeCommitted");
    return value.toBigInt();
  }

  set timeCommitted(value: BigInt) {
    this.set("timeCommitted", Value.fromBigInt(value));
  }

  get admin(): Bytes | null {
    let value = this.get("admin");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set admin(value: Bytes | null) {
    if (value === null) {
      this.unset("admin");
    } else {
      this.set("admin", Value.fromBytes(value as Bytes));
    }
  }

  get timeAdmin(): BigInt | null {
    let value = this.get("timeAdmin");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timeAdmin(value: BigInt | null) {
    if (value === null) {
      this.unset("timeAdmin");
    } else {
      this.set("timeAdmin", Value.fromBigInt(value as BigInt));
    }
  }
}
